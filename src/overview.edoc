@title Erlang bindings for ZeroMQ messaging framework.

@author Serge Aleynikov <saleyn at gmail dot com>
@author Dhammika Pathirana <dhammika at gmail dot com>
@author Chris Rempel <csrl at gmx dot com>

@copyright 2010 Serge Aleynikov and Dhammika Pathirana, 2011 Chris Rempel

@version {@version}

@doc

<ol>
<li>{@section Overview}</li>
<li>{@section Downloading}</li>
<li>{@section Building}</li>
<li>{@section Issue Tracking}</li>
<li>{@section Contributing}</li>
<li>{@section Architecture}</li>
<li>{@section Known Limitations}</li>
<li>{@section Usage}</li>
<li>{@section License}</li>
</ol>

== Overview ==

ZeroMQ is an open-source fast middleware messaging framework supporting
unicast and multicast communications between peers using various convenient
design patterns.  This project aims at interoperability of Erlang with other
ZeroMQ distributed clients that may be written in other languages.

ZeroMQ project is found here: [http://zeromq.org]

== Downloading ==

Project location and git repository:
<ul>
<li>[http://github.com/zeromq/erlzmq]</li>
<li>`git clone http://github.com/zeromq/erlzmq.git'</li>
</ul>

== Building ==

Obtain and build the latest version of zeromq (at least 2.1.1):

[http://github.com/zeromq/zeromq2]

```
  # Get and build 0MQ project

  $ cd /tmp
  $ git clone http://github.com/zeromq/zeromq2.git
  $ cd /tmp/zeromq2
  $ ./configure
  $ make
  $ make install
'''

Erlzmq project comes with a bootstrap script that uses autotools to create a
configure script.  Below are the steps needed to build erlzmq given the default
location of ZeroMQ installation being `/usr/local':

Make sure that Erlang is installed and `erl' is in the `PATH'. If it's not
in the path, specify `--with-erlang=PATH' option for the configure script.

Run:

```
  $ cd /tmp
  $ git clone http://github.com/zeromq/erlzmq.git
  $ cd /tmp/erlzmq
  $ ./bootstrap
  $ ./configure --with-zeromq=/usr/local
  $ make
  $ make docs
  $ make install
'''

== Issue Tracking ==

[http://github.com/zeromq/erlzmq/issues]

== Contributing ==

When you make any changes to documentation, run the following script to
update documentation on the [http://zeromq.github.com/erlzmq] site:

```
  $ make gitdocs
'''

The following make target can be used to do a cleanup of all artifacts
of make and configure:

```
  $ make clean-bootstrap
'''

== Architecture ==

These erlang bindings offer nearly a direct wrapper around the ZeroMQ C bindings
and as such referencing [http://api.zeromq.org] will provide the necessary
information on how to use the {@link zmq} module api. The Erlang specific
concepts are documented here and in the {@link zmq} module api reference.

These bindings are aware of 0MQ `Socket' ownership by monitoring the Erlang
process that created the 0MQ `Socket'.  This means that a `Socket' is
automatically garbage collected when the Erlang process that owns the `Socket'
dies.

{@link zmq:init/1} initializes a 0MQ `Context' by starting and linking a
gen_server to the calling process. This server wraps and maintains the
initialized 0MQ `Context'.  {@link zmq:init/1} returns the `Context' which is
the {@type pid()} of the gen_server.  The `Context' is used in
{@link zmq:socket/2} and {@link zmq:term/1}.  The `Context' may be used by any
Erlang process when calling {@link zmq:socket/2}.

{@link zmq:init/2} is like {@link zmq:init/1} but it registers the gen_server
using the given `Name'.  As such the returned {@type pid()} of the gen_server
can be ignored.  The registered `Name' can be used as the 0MQ `Context' when
calling {@link zmq:socket/2} and {@link zmq:term/1}.  The typical use of this
function is wrapping it for use in a supervision tree.

{@link zmq:socket/2} creates a 0MQ Socket by starting and linking a gen_server
to the calling process.  This server wraps and maintains the created 0MQ
`Socket'.  {@link zmq:socket/2} returns the `Socket' which is the {@type pid()}
of the gen_server.  The `Socket' is used in the other {@link zmq} module socket
functions.  A `Socket' may be used by any Erlang process when calling into the
{@link zmq} module and not just the owner process.  However, application logic
must synchronize the use of the `Socket' accordingly.  eg. If you have a 0MQ
`req' socket which requires `send'/`recv' alternation, it is up to the
application logic to ensure this.

{@link zmq:socket/3} is like {@link zmq:socket/2} but it registers the
gen_server using the given `Name'.  As such the returned {@type pid()} of the
gen_server can be ignored.  The registered `Name' can be used as the 0MQ
`Socket' when calling other {@link zmq} module api. The typical use of this
function is wrapping it for use in a supervision tree.  Note that this does
<em>not</em> set the `Socket' identity.

{@link zmq:send/2} and {@link zmq:send/3} accept either a binary or a list of
binaries.  If given a list of binaries, then each binary in the list will be
sent with 0MQ `sndmore' flag set except for the last one, which ends the 0MQ
multi-part message.

{@link zmq:recv/1} and {@link zmq:recv/2} will return a binary or a list of
binaries.  If the `Socket' receives a multi-part message, the entire message
will be returned as a list of binaries.  There is no need to explicitly check
for 0MQ `rcvmore' socket option using {@link zmq:getsockopt/2} and repeatedly
calling {@link zmq:recv/1} as would be necessary using the native 0MQ C language
bindings.

{@link zmq:poll/2} is non blocking and upon successfully setting up the requested
polling for the `Socket', will return `ok'.  When an event on the `Socket'
occurs, a message will be put in the `Socket' owner's mailbox containing the
returned events having the format of
{@type {zmq, Socket::pid(), REvents::[zmq:zmq_event()]@}}.  Once the event
message is received, {@link zmq:poll/2} must be called again to receive further
events.

{@link zmq:term/1} is non blocking and fails with {@link zmq:zmq_error()} of
`eagain' if any open `Sockets' exist for the given `Context'.  Ensure all
sockets are closed before calling {@link zmq:term/1}.  If the `Context' owner
process dies, all `Sockets' in the `Context' will be forcefully closed and the
`Context' terminated.

== Known Limitations ==

<ul>
<li>There may be an efficiency issue using many sockets under a single context
    as all sockets share a single erlang port, which is synchronous.  Thus one
    socket's use may block another temporarily.</li>
<li>The socket gen_server will crash if passed invalid terms.  Instead this
    should generate the expected errno EINVAL.</li>
</ul>

== Usage ==

=== Sample ZMQ_REQ client ===
```
    % Initialize a ZeroMQ context.
    1> {ok, C} = zmq:init(1).
    {ok,<0.36.0>}

    % Create a ZeroMQ REQ socket.
    2> {ok, S} = zmq:socket(C, req).
    {ok,<0.37.0>}

    % Connect to server
    3> zmq:connect(S, "tcp://127.0.0.1:5555").
    ok

    % Send a message to server
    4> zmq:send(S, <<"Test">>).
    ok

    % Receive a reply
    5> zmq:recv(S).
    {ok,<<"Reply">>}

    % Close socket
    6> zmq:close(S).
    ok

    % Terminate context
    7> zmq:term(C).
    ok
'''

=== Sample ZMQ_REP server ===

Start another shell either within the same Erlang VM
by using ^G, or in a separate OS shell:

```
    % Initialize a ZeroMQ context.
    1> {ok, C} = zmq:init(1).
    {ok,<0.36.0>}

    % Create a ZeroMQ REP socket.
    2> {ok, S} = zmq:socket(C, rep).
    {ok,<0.37.0>}

    % Establish server
    3> zmq:bind(S, "tcp://127.0.0.1:5555").
    ok

    % Receive message from a client
    4> zmq:recv(S).
    {ok,<<"Test">>}

    % Reply to the client
    5> zmq:send(S, <<"Reply">>).
    ok

    % Close socket
    6> zmq:close(S).
    ok

    % Terminate context
    7> zmq:term(C).
    ok
'''

== License ==

The project is released under BSD license.
